package refactoringgtl.moving

import "http://www.eclipse.org/emf/2002/Ecore"
import "platform:/resource/SoftwareSystem/model/softwareSystem.ecore"

rule moveComponent {
	[=] formerSystem : System {
		[-] -components->component
	}
	[=] newSystem : System {
		[+] -components->component
	}
	[=] component : Component
};

/////////////////////////////////////////////////////////////
/////// CONSTRAINT VIOLATIONS AND REPAIRS WHEN MOVING ///////
/////////////////////////////////////////////////////////////

// These violations and repairs come from moving the component and breaking an 'intact' import
// Repairs and violations depend on the system and component binding, e.g., moving a component from a system where it imports 
// another component from to some other system will cause a violation while doing it the opposite way
// will repair one
pattern importedComponentInSystem {
	[=] system : System {
		[=] -components->importedComponent
	}
	
	[=] component : Component {
		[=] -imports->importedComponent
	}
	[=] importedComponent : Component
};

pattern importingComponentInSystem {
	[=] system : System {
		[=] -components->importingComponent
	}
	
	[=] importingComponent : Component {
		[=] -imports->component
	}
	[=] component : Component 
};

// These violations come from moving the component 
pattern importedComponentNotInSystem {
	[=] system : System 
	[=] component : Component {
		[=] -imports-> importedComponent
	}
	[=] importedComponent : Component
	forbid(componentEdge)[system=system, importedComponent=component]
};

pattern importingComponentNotInSystem {
	[=] system : System 
	[=] component : Component
	[=] importingComponent : Component {
		[=] -imports-> component
	}
	forbid(componentEdge)[system=system, importingComponent=component]
};

/////////////////////////////////////////////////
///////         SUPPORT PATTERNS          ///////
/////////////////////////////////////////////////

pattern componentEdge {
	[=] system : System {
		[=] -components-> component
	}
	[=] component : Component 
};

